# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from app.models.base_model_ import Model
from app import util


class Entry(Model):
    """NOTE: This class is auto generated by the openapi code generator program.

    Do not edit the class manually.
    """
    def __init__(self, sensor_id: str=None, humidity: float=None, temperature: float=None):  # noqa: E501
        """Entry - a model defined in Swagger

        :param sensor_id: The sensor_id of this Entry.  # noqa: E501
        :type sensor_id: str
        :param humidity: The humidity of this Entry.  # noqa: E501
        :type humidity: float
        :param temperature: The temperature of this Entry.  # noqa: E501
        :type temperature: float
        """
        self.swagger_types = {
            'sensor_id': str,
            'humidity': float,
            'temperature': float
        }

        self.attribute_map = {
            'sensor_id': 'sensorId',
            'humidity': 'humidity',
            'temperature': 'temperature'
        }
        self._sensor_id = sensor_id
        self._humidity = humidity
        self._temperature = temperature

    @classmethod
    def from_dict(cls, dikt) -> 'Entry':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Entry of this Entry.  # noqa: E501
        :rtype: Entry
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sensor_id(self) -> str:
        """Gets the sensor_id of this Entry.


        :return: The sensor_id of this Entry.
        :rtype: str
        """
        return self._sensor_id

    @sensor_id.setter
    def sensor_id(self, sensor_id: str):
        """Sets the sensor_id of this Entry.


        :param sensor_id: The sensor_id of this Entry.
        :type sensor_id: str
        """
        if sensor_id is None:
            raise ValueError("Invalid value for `sensor_id`, must not be `None`")  # noqa: E501

        self._sensor_id = sensor_id

    @property
    def humidity(self) -> float:
        """Gets the humidity of this Entry.

        humidity in percentage  # noqa: E501

        :return: The humidity of this Entry.
        :rtype: float
        """
        return self._humidity

    @humidity.setter
    def humidity(self, humidity: float):
        """Sets the humidity of this Entry.

        humidity in percentage  # noqa: E501

        :param humidity: The humidity of this Entry.
        :type humidity: float
        """
        if humidity is None:
            raise ValueError("Invalid value for `humidity`, must not be `None`")  # noqa: E501

        self._humidity = humidity

    @property
    def temperature(self) -> float:
        """Gets the temperature of this Entry.


        :return: The temperature of this Entry.
        :rtype: float
        """
        return self._temperature

    @temperature.setter
    def temperature(self, temperature: float):
        """Sets the temperature of this Entry.


        :param temperature: The temperature of this Entry.
        :type temperature: float
        """
        if temperature is None:
            raise ValueError("Invalid value for `temperature`, must not be `None`")  # noqa: E501

        self._temperature = temperature
